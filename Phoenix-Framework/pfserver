#!/usr/bin/env python3

import logging
import os
import socket
import sys
import time
from argparse import ArgumentParser

# Check if the user is root
"""if not os.getuid() == 0:
    print("Please start with Sudo or Root Rights")
    exit()"""
parser = ArgumentParser(
    "pfserver", usage="sudo pfserver [options]", description="Start the Phoenix-Framework C2 server.")

web = parser.add_argument_group("Web Server")
web.add_argument("-a", "--address", help=f"The address")
web.add_argument(
    "-p", "--port", help="The port", type=int)
web.add_argument("-s", "--ssl", help="Use SSL", action="store_true")

output = parser.add_argument_group("Output")
output.add_argument(
    "-d", "--debug", help="Enable debugging", action="store_true")
output.add_argument("-b", "--banner",
                    help="Disable banner", action="store_true")
output.add_argument(
    "-q", "--quiet", help="Disable all output", action="store_true")

misc = parser.add_argument_group("Misc")
misc.add_argument("-v", "--version",
                  help="Print the version and exit", action="store_true")
misc.add_argument("-l", "--location",
                  help="The location of the framework [/usr/share/Phoenix-Framework]", default="/usr/share/Phoenix-Framework/Server")
misc.add_argument("-c", "--config",
                  help="Location of the config file. [/usr/share/Phoenix-Framework/Server/Data/config.toml]",
                  default="/usr/share/Phoenix-Framework/Server/Data/config.toml")
admin = parser.add_argument_group("Admin")
admin.add_argument("--recreate-super-user",
                   help="Recreate the super user.", action="store_true")
admin.add_argument("--backup-database",
                   help="Backup database to the given location.")
admin.add_argument("--reset-database",
                   help="Reset the database", action="store_true")
admin.add_argument("--reset-database-table",
                   help="Reset a specified database table.", choices=["users",
                                                                      "listeners",
                                                                      "stagers",
                                                                      "credentials",
                                                                      "operations",
                                                                      "devices",
                                                                      "logs"])

admin.add_argument(
    "--degrade", help="Degrade to a sub server", action="store_true")
admin.add_argument(
    "--promote", help="Promote the to a main server", action="store_true")
admin.add_argument("--recreate-ssl-certificates",
                   help="Recreate the ssl certificates", action="store_true")

if __name__ == "__main__":
    args = parser.parse_args()
    # Check if location is valid
    os.environ["PHOENIX_CONFIG_PATH"] = args.config # set config path
    if not os.path.isdir(args.location):
        print("[ERROR] Invalid location.")
        exit()

    sys.path.insert(0, args.location)
    os.chdir(args.location)
    # try:
    from Commander import Commander
    from Commander.services import start_listeners, start_web
    from Utils.admin import (recreate_ssl, recreate_super_user, reset_database,
                             reset_table)
    from Utils.config import load_config
    from Utils.misc import version
    from Utils.ui import log, logo, ph_print
    """except ImportError:
        print("[ERROR] Not all required libraries are installed.")
        exit()"""
    config = load_config()

    # Output args
    if args.version:
        ph_print("Phoenix Framework C2 Server v" + version)
        exit()
    if args.quiet and args.debug:
        print("[ERROR] -q and -d are mutually exclusive.")
        exit()
    if args.quiet:
        os.environ["PHOENIX_LOG"] = "false"
        print("Starting Phoenix Framework in quiet mode.")
    if not args.banner:
        ph_print(logo, True)

    if args.debug:
        os.environ["PHOENIX_DEBUG"] = "true"
        logging.basicConfig(level=logging.DEBUG,
                            format='%(asctime)s - %(levelname)s - %(message)s')

    log("Welcome to Phoenix Framework.", "success")

    # admin args
    if args.reset_database:
        if input("Are you sure, that you want to reset the database [Y/n]: ").lower() == "y":
            reset_database()
    if args.recreate_super_user:
        recreate_super_user()
    if args.recreate_ssl_certificates:
        recreate_ssl()

    # web-server args
    # replace config data with args if they are specified
    if args.address:
        config["web"]["address"] = args.address
    if args.port:
        config["web"]["port"] = args.port
    if args.ssl:
        config["web"]["ssl"] = args.ssl

    # Initialize commander
    commander = Commander()

    # Start listeners
    log("Starting listeners.", "info")
    start_listeners(commander)
    log("All listeners started.", "success")

    # Start the web server
    log("Starting web server.", "info")
    try:
        web_config = config["web"] # shorten code
        web = start_web(web_config["address"], web_config["port"],
                        web_config["ssl"], commander)
    except Exception as e:
        log(str(e), "error")
        os._exit(1)
    else:
        log("Web server started.", "success")

    log(f"Accessible at http{'s' if web_config['ssl'] else ''}://{web_config['address']}:{web_config['port']} .", "info")
    log(f"Press CTRL+C to exit.", "info")
    if args.quiet:
        print("Finished startup.")
    while True:
        try:
            #print(input("Server > "))
            time.sleep(1)
        except KeyboardInterrupt:
            log("Exiting", alert="info")
            os._exit(0)
