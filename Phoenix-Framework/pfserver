#!/usr/bin/python3

import logging
import time
import socket
import os
import sys
from argparse import ArgumentParser

config = {}  # not finished

# Check if the user is root
"""if not os.getuid() == 0:
    print("Please start with Sudo or Root Rights")
    exit()"""
parser = ArgumentParser(
    "pfserver", usage="sudo pfserver [options]", description="Start the Phoenix-Framework C2 server.")

web = parser.add_argument_group("Web Server")
web.add_argument("-a", "--address", help=f"The address [{socket.gethostbyname(socket.gethostname())}]",
                 default=socket.gethostbyname(socket.gethostname()))
web.add_argument(
    "-p", "--port", help="The port [8080]", type=int, default=8080)
web.add_argument("-s", "--ssl", help="Use SSL [false]", action="store_true")

cli = parser.add_argument_group("CLI")
cli.add_argument(
    "-d", "--debug", help="Enable debugging [false]", action="store_true")
cli.add_argument("-b", "--banner",
                 help="Disable banner [false]", action="store_true")
cli.add_argument(
    "-q", "--quiet", help="Disable all output [false]", action="store_true")

misc = parser.add_argument_group("Misc")
misc.add_argument("-v", "--version",
                  help="Print the version and exit", action="store_true")
misc.add_argument("-l", "--location",
                  help="The location of the framework [/usr/share/Phoenix-Framework]", default="/usr/share/Phoenix-Framework/Server")

admin = parser.add_argument_group("Admin")
admin.add_argument("--recreate-super-user",
                   help="Recreate the super user.", action="store_true")
admin.add_argument("--backup-database",
                   help="Backup database to the given location.")
admin.add_argument("--reset-database",
                   help="Reset the database", action="store_true")
admin.add_argument("--reset-database-table",
                   help="Reset a specified database table.", choices=["users",
                                                                      "listeners",
                                                                      "stagers",
                                                                      "credentials",
                                                                      "operations",
                                                                      "devices",
                                                                      "logs"])

argument_help = "Degrade to a sub server" \
    if config.get('server-type', "") == "main" \
    else "Promote the to a main server"
admin.add_argument("--change", help=argument_help, action="store_true")
admin.add_argument("--recreate-ssl-certificates",
                   help="Recreate the ssl certificates", action="store_true")

if __name__ == "__main__":
    args = parser.parse_args()
    # Check if location is valid
    if not os.path.isdir(args.location):
        print("[ERROR] Invalid location.")
        exit()

    sys.path.insert(0, args.location)
    os.chdir(args.location)

    # try:
    from Server.services import start_listeners, start_web
    from Server.server_class import ServerClass
    from Server.admin import 
    from Utils.misc import version
    from Utils.ui import log, ph_print, logo
    """except ImportError:
        print("[ERROR] Not all required libraries are installed.")
        exit()"""

    #rint(args)
    # Get arguments
    if args.version:
        ph_print("Phoenix Framework server v" + version)
        exit()
    if args.quiet and args.debug:
        print("[ERROR] -q and -d are mutually exclusive.")
        exit()
    if args.quiet:
        os.environ["PHOENIX_LOG"] = "false"
        print("Starting Phoenix Framework in quiet mode.")
    if not args.banner:
        ph_print(logo)

    # Set Debugging
    if args.debug:
        logging.basicConfig(level=logging.DEBUG,
                            format='%(asctime)s - %(levelname)s - %(message)s')

    # Initialize server
    server = ServerClass()

    log("Welcome to Phoenix Framework.", "success")
    # Start listeners
    log("Starting listeners.", "info")
    try:
        start_listeners(server)
    except Exception as e:
        log(str(e), "error")
        os._exit(1)
    log("Listeners started.", "success")

    # Start the web server
    log("Starting web server.", "info")
    try:
        web = start_web(args.address, args.port, args.ssl, server, args.debug)
    except Exception as e:
        log(str(e), "error")
        os._exit(1)
    else:
        log("Web server started.", "success")

    log(f"Accessible at http{'s' if args.ssl else ''}://{args.address}:{args.port} .", "info")
    log(f"Press CTRL+C to exit.", "info")
    if args.quiet:
        print("Finished startup.")
    while True:
        try:
            time.sleep(1)
        except KeyboardInterrupt:
            log("Exiting", alert="info")
            os._exit(1)
        except Exception as error:
            log("Unknown Error", alert="critical")
            log(str(error), "error")
            os._exit(1)

